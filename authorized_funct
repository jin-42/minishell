// WARNING //
Redirect stdout when using printf instead of ft_printf_fd to avoid mix up in msg
No global struct : only 1 global var, used to count number of a received signal
Not interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon).

2+ < redirections : 
	< test < test1 => test is ignored, test1 is input, last redirection prevails
	< test cmd < test1 > test2 => test is ignored, last redirection prevails

2 > redirections : 
	> test > test1 => test is erased, test1 contains output, last redirection prevails

< file_not_existing OR unauthorized_file 
	=> If first : Following function is not executed / checked (if not existing, no error msg)
	=> If first : following outfile is not created / accessed if no pipe (is created if 2 functions with a pipe)
	=> If first : if pipe | outfile is opened and 2nd function executed
	=> If after functions : outfile is created, not accessed, but closest function not executed / checked (if not existing, no error msg)
> unauthorized_file 
	=> closest function is not executed, and not checked (if not existing, no error msg)
	=> If there are pipes, 
> AND < are unauthorized_files
	=> 1st file is accessed (error msg), > or <, cmd is not executed / checked

// GENERALS //

printf
int printf(const char *format, ...);

malloc

free

write

access #include <unistd.h>
int access(const char *pathname, int mode);
	vérifie si le processus appelant peut accéder au fichier pathname. 
	Si pathname est un lien symbolique, il est déréférencé.
	Le mode indique la (les) vérification(s) d'accessibilité à effectuer :
		F_OK
		OU un masque constitué par un OU binaire « | » entre les valeurs R_OK, W_OK et X_OK. 
		F_OK R_OK, W_OK et X_OK servent à tester respectivement, 
		si le fichier existe, la lecture, l'écriture et l'exécution du fichier. 
	 renvoie 0 s'il réussit (toutes les requêtes sont autorisées), ou -1 s'il échoue (au moins une requête du mode est interdite), 
	 auquel cas errno contient le code d'erreur.  

open

read

close

exit #include <stdlib.h>
void exit(int status);
	ermine normalement le processus et la valeur status est renvoyée au processus parent. 
	EXIT_SUCCESS et EXIT_FAILURE peuvent indiquer respectivement une terminaison en succès ou en échec.  

// HISTORY // #include GNU History Library <readline/history.h>

The history list is an array of history entries. 
A history entry is declared as follows:

typedef void *histdata_t;

typedef struct _hist_entry {
  char *line;
  char *timestamp;
  histdata_t data;
} HIST_ENTRY;

The history list itself might therefore be declared as

HIST_ENTRY **the_history_list;

The state of the History library is encapsulated into a single structure:

/*
 * A structure used to pass around the current state of the history.
 */
typedef struct _hist_state {
  HIST_ENTRY **entries; /* Pointer to the entries themselves. */
  int offset;           /* The location pointer within this array. */
  int length;           /* Number of elements within this array. */
  int size;             /* Number of slots allocated to this array. */
  int flags;
} HISTORY_STATE;


// FUNCTIONS : READLINE //

readline  #include <stdio.h>
char *readline (const char *prompt);
	read a line from the terminal and return it, using
    prompt as a prompt.  If prompt is NULL or the empty string, no
	prompt is issued.  The line returned is allocated with malloc(3);
    the caller must free it when finished.  The line returned has the
    final newline removed, so only the text of the line remains.
	- A blank line returns the empty string.  
	- If EOF is encountered while reading a line, and the line is empty, 
		NULL is returned.  
	- If an EOF is read with a non-empty line, it is treated as a newline.
This function can cause memory leaks.

rl_clear_history #include GNU Readline library <readline/readline.h>
void rl_clear_history (void);
	Clear the history list by deleting all of the entries, 
	in the same manner as the History library’s clear_history() function. 
	This differs from clear_history because it frees private data 
	Readline saves in the history list.

rl_on_new_line #include GNU Readline library <readline/readline.h>
int rl_on_new_line (void);
	Tell the update functions that we have moved onto a new (empty) line, 
	usually after outputting a newline. 

rl_replace_line #include GNU Readline library <readline/readline.h>
void rl_replace_line (const char *text, int clear_undo);
	Replace the contents of rl_line_buffer with text. 
	The point and mark are preserved, if possible. 
	If clear_undo is non-zero, the undo list associated with the 
	current line is cleared.

rl_redisplay #include GNU Readline library <readline/readline.h>
void rl_redisplay (void);
	Change what’s displayed on the screen to reflect the 
	current contents of rl_line_buffer.

add_history #include GNU History Library <readline/history.h>
void add_history (const char *string);
	https://tiswww.case.edu/php/chet/readline/history.html
	Place string at the end of the history list. 
	The associated data field (if any) is set to NULL. 
	If the maximum number of history entries has been set using stifle_history(),
	and the new number of history entries would exceed that maximum, 
	the oldest history entry is removed. (not used in minishell ?)
	If you want the user to be able to get at the line later, 
	you must call add_history() to save the line away in a history 
	list of such lines. 

// PROCESSING //

fork

wait #include <sys/types.h> #include <sys/wait.h>
 pid_t wait(int *status); 
	Suspend l'exécution du processus appelant jusqu'à ce que l'un de ses fils se termine.
	 En cas de réussite, le PID du fils qui s'est terminé est renvoyé, en cas d'échec -1 est renvoyé. 
	Peut stocker dans wait(&status) le statut d'exit.
	Utiliser avec : 
		- if WIFEXITED(status) -> catch la valeur WEXITSTATUS(status) (fin de processus nor;ale)
		- else if WIFSIGNALED(status) -> catch la valeur WTERMSIG(status), lui ajouter 128 (fin par un signal)


waitpid #include <sys/types.h> #include <sys/wait.h>
 pid_t waitpid(pid_t pid, int *status, int options); 
	pid : 
		< -1 : attendre la fin de n'importe lequel des processus fils dont le GID du processus est égal à la valeur absolue de pid. 
		-1 : attendre n'importe lequel des processus fils. 
		0 : attendre n'importe lequel des processus fils dont le GID du processus est égal à celui du processus appelant. 
		> 0 : attendre n'importe lequel des processus fils dont le PID est égal à pid. 
	Peut stocker dans &status le statut d'exit.

wait3 #include <sys/types.h> #include <sys/wait.h>   #include <sys/resource.h> +/- #include <sys/time.h>
pid_t wait3(int *status, int options, struct rusage *rusage);
	Equivalent de  waitpid(-1, status, options);
	peut être utilisé pour sélectionner un ou des fils spécifique(s) à attendre, 
	et retourne  également  des  informations  sur  l’utilisation  des
    ressources par le fils dans la structure pointée par rusage.

wait4 #include <sys/types.h> #include <sys/wait.h>   #include <sys/resource.h> +/- #include <sys/time.h>
pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
	Equivalent de waitpid(pid, status, options);
	attend n’importe quel fils et retourne  également  des  informations  sur  l’utilisation  des
    ressources par le fils dans la structure pointée par rusage.

execve

dup


dup2


pipe

strerror


perror

getenv #include <stdlib.h>
char *getenv(const char *name);
	Recherche dans la liste des variables d'environnement un variable nommée name, 
	et renvoie un pointeur sur la chaîne value correspondante.  


// SIGNALS //

signal


sigaction


sigemptyset


sigaddset


kill

// MANIP DU TERMINAL //

isatty #include <unistd.h>
int isatty(int desc);
	renvoie 1 si desc est un descripteur de fichier ouvert connecté à un terminal, 
	ou 0 autrement.  

ttyname #include <unistd.h>
char *ttyname(int fd);
	renvoie un pointeur sur le chemin d'accès terminé par un octet 
	nul du périphérique terminal ouvert associé au descripteur de fichier fd, 
	ou NULL en cas d'erreur (par exemple si fd n'est pas connecté à un terminal).
	La valeur renvoyée peut pointer vers des données statiques, 
	susceptibles d'être écrasées lors d'un appel ultérieur. 

ttyslot #include <unistd.h> 
int ttyslot(void);
	La fonction ttyslot() renvoie la position de l'entrée du terminal 
	en cours dans un fichier. 

ioctl #include <sys/ioctl.h>
int ioctl(int d, int requête, ...);
	modifie le comportement des périphériques sous-jacents des fichiers spéciaux.
	En particulier, de nombreuses caractéristiques des fichiers spéciaux 
	en mode caractère (par exemple des terminaux) peuvent être contrôlées 
	avec des requêtes ioctl(). 
	- d doit être un descripteur de fichier ouvert.
	- requete est le code de la requête dépendant du périphérique. 
	- ... est un pointeur non typé. 
		Il est traditionnellement défini en char *argp 
		(ceci date de l'époque avant que void * soit du C valide), 
		et sera ainsi nommé dans le reste de cette page.
	Une requête ioctl() encapsule le fait que l'argument est un paramètre 
	d'entrée ou de sortie ainsi que la taille de l'argument argp en octets. 
	Les macros et constantes symboliques décrivant les requêtes ioctl() 
	se trouvent dans le fichier <sys/ioctl.h>.   

// MANIP DES FICHIERS, DIR ET INFOS LES CONCERNANT //

getcwd #include <unistd.h>
char *getcwd(char *buf, size_t size);
	copie le chemin d'accès absolu du répertoire de travail courant 
	dans la chaîne pointée par buf, qui est de longueur size.
	Si le chemin du répertoire en cours nécessite un tampon plus long que size 
	octets, la fonction renvoie NULL, et errno contient le code d'erreur ERANGE. 
	Une application doit détecter cette erreur et allouer un tampon plus grand 
	si besoin est. 
	Si buf est NULL, le comportement de getcwd() est indéfini. 
	/!\ Aura besoin d'etre free ensuite !
	-> Utile pour pwd !


chdir #include <unistd.h>
int chdir(const char *path);
	remplace le répertoire de travail courant du processus appelant 
	par celui indiqué dans le chemin path. 
	Ces appels renvoient 0 s'ils réussissent, ou -1 s'ils échouent,
	auquel cas errno est renseignée en conséquence.  
	-> Utile pour cd !

stat #include <sys/types.h> #include <sys/stat.h> #include <unistd.h>
int stat(const char *path, struct stat *buf);
	envoie des informations à propos d'un fichier dans le tampon *buf. 
	Aucune permission n'est nécessaire sur le fichier lui-même, 
	mais vous devez avoir la permission d'exécution (parcours) pour tous 
	les répertoires de path qui mènent au fichier.
	Ces appels système retournent zéro s'ils réussissent. 
	En cas d'échec, -1 est renvoyé, et errno contient le code de l'erreur.  

struct stat {
    dev_t     st_dev;      /* ID du périphérique contenant le fichier */
    ino_t     st_ino;      /* Numéro inœud */
    mode_t    st_mode;     /* Protection */
    nlink_t   st_nlink;    /* Nb liens matériels */
    uid_t     st_uid;      /* UID propriétaire */
    gid_t     st_gid;      /* GID propriétaire */
    dev_t     st_rdev;     /* ID périphérique (si fichier spécial) */
    off_t     st_size;     /* Taille totale en octets */
    blksize_t st_blksize;  /* Taille de bloc pour E/S */
    blkcnt_t  st_blocks;   /* Nombre de blocs alloués */
    time_t    st_atime;    /* Heure dernier accès */
    time_t    st_mtime;    /* Heure dernière modification */
    time_t    st_ctime;    /* Heure dernier changement état */
};

lstat #include <sys/types.h> #include <sys/stat.h> #include <unistd.h>
int lstat(const char *path, struct stat *buf);
	est  identique  à stat(), sauf que dans le cas où path est un lien symbolique, il
    donne l'état du lien lui-même plutôt que celui du fichier visé.


fstat #include <sys/types.h> #include <sys/stat.h> #include <unistd.h>
int fstat(int fd, struct stat *buf);
	est identique à stat(), sauf que le  fichier  dont  l'état  est  donné  est  celui
    référencé par le descripteur de fichier fd.

unlink #include <unistd.h>
int unlink(const char *pathname);  
	détruit un nom dans le système de fichiers. 
	Si ce nom était le dernier lien sur un fichier, 
	et si aucun processus n'a ouvert ce fichier, ce dernier est effacé, 
	et l'espace qu'il utilisait est rendu disponible.
	Si le nom était le dernier lien sur un fichier, 
	mais qu'un processus conserve encore le fichier ouvert, 
	celui-ci continue d'exister jusqu'à ce que le dernier descripteur le référençant soit fermé.
	Si le nom correspond à un lien symbolique, le lien est supprimé. 
	Cet appel système renvoie 0 s'il réussit ou -1 s'il échoue, auquel cas errno contient le code d'erreur.
	-> Utile pour faire un here_doc dans un fichier  

opendir #include <sys/types.h> #include <dirent.h>
DIR *opendir(const char *name);
	ouvre un flux répertoire correspondant au répertoire name, 
	et renvoie un pointeur sur ce flux. 
	Le flux est positionné sur la première entrée du répertoire. 
	renvoit un pointeur sur le flux répertoire 
	ou NULL si une erreur se produit, auquel cas errno contient le code d'erreur. 

readdir #include <dirent.h>
int readdir(DIR *dir, struct dirent *entry, struct dirent **result);
	envoie un pointeur sur une structure dirent représentant 
	l'entrée suivante du flux répertoire pointé par dir. 
	Elle renvoie NULL à la fin du répertoire, ou en cas d'erreur. 

struct dirent {
    ino_t          d_ino;       /* numéro d'inœud */
    off_t          d_off;       /* décalage jusqu'à la dirent suivante */
    unsigned short d_reclen;    /* longueur de cet enregistrement */
    unsigned char  d_type;      /* type du fichier */
    char           d_name[256]; /* nom du fichier */
};


closedir #include <sys/types.h> #include <dirent.h>
int closedir(DIR *dir);
	ferme le flux de répertoire associé à dir. 
	Après cette invocation, le descripteur dir du flux de répertoire n'est plus disponible.  
	renvoie 0 si elle réussit, ou -1 si elle échoue, auquel cas errno contient le code d'erreur.  

// TERMIOS //

Etablissent une interface générale sous forme de terminal, permettant de contrôler les ports de communication asynchrone.  

Structure termios contenant au moins : 

tcflag_t c_iflag;      /* modes d'entrée */
tcflag_t c_oflag;      /* modes de sortie */
tcflag_t c_cflag;      /* modes de contrôle */
tcflag_t c_lflag;      /* modes locaux */
cc_t     c_cc[NCCS];   /* caractères de contrôle */


tcsetattr #include <termios.h> #include <unistd.h>
int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
	Fixe les paramètres du terminal 
	(à moins que le matériel sous-jacent ne le prenne pas en charge) 
	en lisant la structure termios pointée par termios_p. 
	optional_actions précise quand les changements auront lieu.

tcgetattr #include <termios.h> #include <unistd.h>
int tcgetattr(int fd, struct termios *termios_p);
	récupère les paramètres associés à l'objet référencé par fd 
	et les stocke dans la structure termios pointée par termios_p. 
	Cette fonction peut être appelée par un processus en arrière-plan ; 
	néanmoins, les attributs de terminal peuvent être modifiés 
	par la suite par le processus en avant-plan.

// TERMCAP LIBRARY //
Utilities for termcap library : https://www.gnu.org/software/termutils/manual/termcap-1.3/html_mono/termcap.html
enables programs to use display terminals in a terminal-independent manner. 

tgetent #include <curses.h>  #include<term.h>
int tgetent(char	*buffer, char	*termtype);
	Finding the description of the user's terminal type. 
	finds the description and remembers it internally 
	so that you can interrogate it about specific terminal capabilities
	termtype is a string which is the name for the type of terminal to look up. 
	Usually you would obtain this from the environment variable TERM using getenv ("TERM").
	Pass a null pointer for buffer, and tgetent itself allocates the storage using malloc. 
	There is no way to get the address that was allocated, and you shouldn't try to free the storage.

tgetflag #include <curses.h>  #include<term.h>
int tgetflag(const char *id);
	to get a boolean value. 
	If the capability name is present in the terminal description, tgetflag returns 1; 
	otherwise, it returns 0. 

tgetnum #include <curses.h>  #include<term.h>
 int tgetnum(const char *id);
	to get a capability value that is numeric. 
	The argument name is the two-letter code name of the capability. 
	If the capability is present, tgetnum returns the numeric value (which is nonnegative). 
	If the capability is not mentioned in the terminal description, tgetnum returns -1.

tgetstr #include <curses.h>  #include<term.h>
char *tgetstr(const char	*id, char **area);
	get a string value. It returns a pointer to a string which is the capability value, 
	or a null pointer if the capability is not present in the terminal description. 
	There are two ways tgetstr can find space to store the string value: 
		- You can ask tgetstr to allocate the space. 
			Pass a null pointer for the argument area, and tgetstr will use malloc 
			to allocate storage big enough for the value. 
			Termcap will never free this storage or refer to it again; 
			you should free it when you are finished with it. 
		- You can provide the space. 
			Provide for the argument area the address of a pointer variable of type char *. 
			Before calling tgetstr, initialize the variable to point at available space. 
			Then tgetstr will store the string value in that space and will increment the 
			pointer variable to point after the space that has been used. 
			You can use the same pointer variable for many calls to tgetstr. 
			There is no way to determine how much space is needed for a single string, 
			and no way for you to prevent or handle overflow of the area you have provided. 
			However, you can be sure that the total size of all the string values you will 
			obtain from the terminal description is no greater than the size of the description 
			(unless you get the same capability twice). 
			You can determine that size with strlen on the buffer you provided to tgetent. 

tgoto #include <curses.h>  #include<term.h>
char *tgoto(const char *cap, int	col, int row);
	pas compris du tout ...

tputs #include <curses.h>  #include<term.h>
 int tputs(const char *str, int affcnt, int (*putc)(int));
	Computing and performing padding, pas compris
